# source: https://eu1.prisma.sh/liam-raven-61e72f/waterproofjack-prisma/dev
# timestamp: Thu Jan 03 2019 19:47:19 GMT+1100 (Australian Eastern Daylight Time)

type AggregatePrice {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPrice(data: PriceCreateInput!): Price!
  updatePrice(data: PriceUpdateInput!, where: PriceWhereUniqueInput!): Price
  deletePrice(where: PriceWhereUniqueInput!): Price
  upsertPrice(where: PriceWhereUniqueInput!, create: PriceCreateInput!, update: PriceUpdateInput!): Price!
  updateManyPrices(data: PriceUpdateManyMutationInput!, where: PriceWhereInput): BatchPayload!
  deleteManyPrices(where: PriceWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Price implements Node {
  id: ID!
  productId: String!
  supplierProductId: String!
  supplier: String!
  supplierUrl: String!
  productUrl: String!
  currentPrice: Json!
  historicPrices: Json
  region: Region!
}

"""A connection to a list of items."""
type PriceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PriceEdge]!
  aggregate: AggregatePrice!
}

input PriceCreateInput {
  productId: String!
  supplierProductId: String!
  supplier: String!
  supplierUrl: String!
  productUrl: String!
  currentPrice: Json!
  historicPrices: Json
  region: Region!
}

"""An edge in a connection."""
type PriceEdge {
  """The item at the end of the edge."""
  node: Price!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PriceOrderByInput {
  id_ASC
  id_DESC
  productId_ASC
  productId_DESC
  supplierProductId_ASC
  supplierProductId_DESC
  supplier_ASC
  supplier_DESC
  supplierUrl_ASC
  supplierUrl_DESC
  productUrl_ASC
  productUrl_DESC
  currentPrice_ASC
  currentPrice_DESC
  historicPrices_ASC
  historicPrices_DESC
  region_ASC
  region_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PricePreviousValues {
  id: ID!
  productId: String!
  supplierProductId: String!
  supplier: String!
  supplierUrl: String!
  productUrl: String!
  currentPrice: Json!
  historicPrices: Json
  region: Region!
}

type PriceSubscriptionPayload {
  mutation: MutationType!
  node: Price
  updatedFields: [String!]
  previousValues: PricePreviousValues
}

input PriceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PriceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PriceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PriceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PriceWhereInput
}

input PriceUpdateInput {
  productId: String
  supplierProductId: String
  supplier: String
  supplierUrl: String
  productUrl: String
  currentPrice: Json
  historicPrices: Json
  region: Region
}

input PriceUpdateManyMutationInput {
  productId: String
  supplierProductId: String
  supplier: String
  supplierUrl: String
  productUrl: String
  currentPrice: Json
  historicPrices: Json
  region: Region
}

input PriceWhereInput {
  """Logical AND on all given filters."""
  AND: [PriceWhereInput!]

  """Logical OR on all given filters."""
  OR: [PriceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PriceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  productId: String

  """All values that are not equal to given value."""
  productId_not: String

  """All values that are contained in given list."""
  productId_in: [String!]

  """All values that are not contained in given list."""
  productId_not_in: [String!]

  """All values less than the given value."""
  productId_lt: String

  """All values less than or equal the given value."""
  productId_lte: String

  """All values greater than the given value."""
  productId_gt: String

  """All values greater than or equal the given value."""
  productId_gte: String

  """All values containing the given string."""
  productId_contains: String

  """All values not containing the given string."""
  productId_not_contains: String

  """All values starting with the given string."""
  productId_starts_with: String

  """All values not starting with the given string."""
  productId_not_starts_with: String

  """All values ending with the given string."""
  productId_ends_with: String

  """All values not ending with the given string."""
  productId_not_ends_with: String
  supplierProductId: String

  """All values that are not equal to given value."""
  supplierProductId_not: String

  """All values that are contained in given list."""
  supplierProductId_in: [String!]

  """All values that are not contained in given list."""
  supplierProductId_not_in: [String!]

  """All values less than the given value."""
  supplierProductId_lt: String

  """All values less than or equal the given value."""
  supplierProductId_lte: String

  """All values greater than the given value."""
  supplierProductId_gt: String

  """All values greater than or equal the given value."""
  supplierProductId_gte: String

  """All values containing the given string."""
  supplierProductId_contains: String

  """All values not containing the given string."""
  supplierProductId_not_contains: String

  """All values starting with the given string."""
  supplierProductId_starts_with: String

  """All values not starting with the given string."""
  supplierProductId_not_starts_with: String

  """All values ending with the given string."""
  supplierProductId_ends_with: String

  """All values not ending with the given string."""
  supplierProductId_not_ends_with: String
  supplier: String

  """All values that are not equal to given value."""
  supplier_not: String

  """All values that are contained in given list."""
  supplier_in: [String!]

  """All values that are not contained in given list."""
  supplier_not_in: [String!]

  """All values less than the given value."""
  supplier_lt: String

  """All values less than or equal the given value."""
  supplier_lte: String

  """All values greater than the given value."""
  supplier_gt: String

  """All values greater than or equal the given value."""
  supplier_gte: String

  """All values containing the given string."""
  supplier_contains: String

  """All values not containing the given string."""
  supplier_not_contains: String

  """All values starting with the given string."""
  supplier_starts_with: String

  """All values not starting with the given string."""
  supplier_not_starts_with: String

  """All values ending with the given string."""
  supplier_ends_with: String

  """All values not ending with the given string."""
  supplier_not_ends_with: String
  supplierUrl: String

  """All values that are not equal to given value."""
  supplierUrl_not: String

  """All values that are contained in given list."""
  supplierUrl_in: [String!]

  """All values that are not contained in given list."""
  supplierUrl_not_in: [String!]

  """All values less than the given value."""
  supplierUrl_lt: String

  """All values less than or equal the given value."""
  supplierUrl_lte: String

  """All values greater than the given value."""
  supplierUrl_gt: String

  """All values greater than or equal the given value."""
  supplierUrl_gte: String

  """All values containing the given string."""
  supplierUrl_contains: String

  """All values not containing the given string."""
  supplierUrl_not_contains: String

  """All values starting with the given string."""
  supplierUrl_starts_with: String

  """All values not starting with the given string."""
  supplierUrl_not_starts_with: String

  """All values ending with the given string."""
  supplierUrl_ends_with: String

  """All values not ending with the given string."""
  supplierUrl_not_ends_with: String
  productUrl: String

  """All values that are not equal to given value."""
  productUrl_not: String

  """All values that are contained in given list."""
  productUrl_in: [String!]

  """All values that are not contained in given list."""
  productUrl_not_in: [String!]

  """All values less than the given value."""
  productUrl_lt: String

  """All values less than or equal the given value."""
  productUrl_lte: String

  """All values greater than the given value."""
  productUrl_gt: String

  """All values greater than or equal the given value."""
  productUrl_gte: String

  """All values containing the given string."""
  productUrl_contains: String

  """All values not containing the given string."""
  productUrl_not_contains: String

  """All values starting with the given string."""
  productUrl_starts_with: String

  """All values not starting with the given string."""
  productUrl_not_starts_with: String

  """All values ending with the given string."""
  productUrl_ends_with: String

  """All values not ending with the given string."""
  productUrl_not_ends_with: String
  region: Region

  """All values that are not equal to given value."""
  region_not: Region

  """All values that are contained in given list."""
  region_in: [Region!]

  """All values that are not contained in given list."""
  region_not_in: [Region!]
}

input PriceWhereUniqueInput {
  id: ID
  productUrl: String
}

type Query {
  prices(where: PriceWhereInput, orderBy: PriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Price]!
  price(where: PriceWhereUniqueInput!): Price
  pricesConnection(where: PriceWhereInput, orderBy: PriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PriceConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Region {
  UnitedKingdom
  UnitedStates
  Deutschland
  France
  Japan
  Canada
  China
  Italia
  Espana
  India
  Brazil
  Mexico
  Australia
}

type Subscription {
  price(where: PriceSubscriptionWhereInput): PriceSubscriptionPayload
}
